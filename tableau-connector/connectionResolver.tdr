<connection-resolver class='vanguard_connector'>
  <connection-builder>
    <script>
      function apiRequest(params) {
        // Create base URL for API request
        var baseUrl = 'http://localhost:3000/api';
        
        // Get the data type (default to 'items' if not specified)
        var dataType = params["properties"]["type"] || "items";
        
        // Choose endpoint based on data type
        switch(dataType) {
          case "items":
            baseUrl += "/manifest-tables";
            break;
          case "weapons":
            baseUrl += "/historical-weapon-stats";
            break;
          case "vendors":
            baseUrl += "/vendor-inventory";
            break;
          default:
            baseUrl += "/manifest-tables";
        }
        
        // Add query parameters
        var urlParams = {};
        
        // Add API Key to query parameters
        var apiKey = params["authentication"]["apiKey"];
        if (!apiKey || apiKey.length === 0) {
          throw "API Key is required";
        }
        urlParams["apiKey"] = apiKey;
        
        // Add date range parameters if provided
        var startDate = params["properties"]["startDate"];
        var endDate = params["properties"]["endDate"];
        
        if (startDate && startDate.length > 0) {
          urlParams["startDate"] = startDate;
          // If startDate is provided but endDate isn't, use startDate as endDate
          urlParams["endDate"] = (endDate && endDate.length > 0) ? endDate : startDate;
        } else if (endDate && endDate.length > 0) {
          // If only endDate is provided, use it for both
          urlParams["startDate"] = endDate;
          urlParams["endDate"] = endDate;
        }
        
        // Add specific parameters for weapons endpoint
        if (dataType === "weapons") {
          urlParams["membershipType"] = "3"; // Default to Steam
          urlParams["destinyMembershipId"] = "0"; // Default to account-wide stats
        }
        
        // Format URL with parameters
        var formattedUrl = baseUrl + '?' + Object.keys(urlParams).map(function(key) {
          return key + '=' + encodeURIComponent(urlParams[key]);
        }).join('&amp;');
        
        // Return connection information
        return {
          "url": formattedUrl,
          "headers": {
            "Content-Type": "application/json",
            "Accept": "application/json"
          }
        };
      }
      
      function connectionBuilder(params) {
        try {
          return apiRequest(params);
        } catch (error) {
          throw "Connection error: " + error;
        }
      }
      
      return connectionBuilder(params);
    </script>
  </connection-builder>
  
  <connection-normalizer>
    <script>
      function normalizeConnection(connection) {
        var normalized = connection;
        
        // Make sure we have a valid URL
        if (!normalized["url"]) {
          normalized["url"] = "http://localhost:3000/api/manifest-tables";
        }
        
        return normalized;
      }
      
      return normalizeConnection(connection);
    </script>
  </connection-normalizer>
  
  <connection-properties>
    <script>
      function getConnectionProperties(connection) {
        return {
          "vendor": "bungie",
          "driver": "destiny2_api",
          "authentication": "custom"
        };
      }
      
      return getConnectionProperties(connection);
    </script>
  </connection-properties>
</connection-resolver>

